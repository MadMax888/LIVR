{"name":"LIVR","tagline":"Language Independent Validation Rules Specification","body":"Language Independent Validation Rules\r\n=====================================\r\n\r\nValidator meets the following requirements:\r\n\r\n1. Rules are declarative and language independent\r\n2. Any number of rules for each field\r\n3. Validator should return together errors for all fields\r\n4. Exclude all fields that do not have validation rules described\r\n5. Possibility to validate complex hierarchical structures\r\n6. Easy to describe and understand validation\r\n7. Returns understandable error codes (neither error messages nor numeric codes)\r\n8. Easy to implement own rules (usually you will have several in every project)\r\n9. Rules should be able to change results output (\"trim\", \"nested\\_object\", for example)\r\n10. Multipurpose (user input validation, configs validation, contracts programming etc)\r\n11. Unicode support\r\n\r\n## Existing implemenations ##\r\n\r\n* JavaScript - https://github.com/koorchik/js-validator-livr (Available for node.js(npm) and browsers)\r\n* Perl - https://github.com/koorchik/Validator-LIVR (Available on CPAN)\r\n* PHP - https://github.com/WebbyLab/php-validator-livr (https://packagist.org/packages/validator/livr)\r\n* Python - https://github.com/asholok/python-validator-livr (https://pypi.python.org/pypi/LIVR)\r\n* Erlang - https://github.com/Prots/olifer\r\n* Ruby - https://github.com/maktwin/ruby-validator-livr (https://rubygems.org/gems/livr)\r\n\r\n## Additional Tools ##\r\n\r\n* Online JavaScript playground - http://webbylab.github.io/livr-playground/ \r\n* Online multi-language playground - http://livr-multi-playground.webbylab.com/\r\n\r\n## Rules Examples ##\r\n**Simple registration data** [(demo)](http://webbylab.github.io/livr-playground/#%7B%22rules%22%3A%22%7B%5Cn%20%20%20%20name%3A%20'required'%2C%5Cn%20%20%20%20email%3A%20%5B'required'%2C%20'email'%5D%2C%5Cn%20%20%20%20gender%3A%20%7B%20one_of%3A%20%5B%5B'male'%2C%20'female'%5D%5D%20%7D%2C%5Cn%20%20%20%20phone%3A%20%7Bmax_length%3A%2010%7D%2C%5Cn%20%20%20%20password%3A%20%5B'required'%2C%20%7Bmin_length%3A%2010%7D%20%5D%2C%5Cn%20%20%20%20password2%3A%20%7B%20equal_to_field%3A%20'password'%20%7D%5Cn%7D%22%2C%22data%22%3A%22%7B%5Cn%20%20%20%20name%3A%20'John'%2C%5Cn%20%20%20%20email%3A%20'john%40mail.com'%2C%5Cn%20%20%20%20gender%3A%20'male'%2C%5Cn%20%20%20%20phone%3A%20'%2B22221212'%2C%5Cn%20%20%20%20password%3A%20'mypassword1'%2C%5Cn%20%20%20%20password2%3A%20'mypassword1'%5Cn%7D%22%7D)\r\n\r\n    {\r\n        name: 'required',\r\n        email: ['required', 'email'],\r\n        gender: { one_of: ['male', 'female'] },\r\n        phone: {max_length: 10},\r\n        password: ['required', {min_length: 10} ]\r\n        password2: { equal_to_field: 'password' }\r\n    }\r\n\r\n\r\n* 'required' is a shorter form of { 'required': [] }\r\n* {max\\_length: 10} is a shorter form of {max\\_length: [10]}\r\n*See \"How it works\" section*\r\n\r\n**Simple validation of nested object** [(demo)](http://webbylab.github.io/livr-playground/#%7B%22rules%22%3A%22%7B%5Cn%20%20%20%20name%3A%20'required'%2C%5Cn%20%20%20%20phone%3A%20%7Bmax_length%3A%2010%7D%2C%5Cn%20%20%20%20address%3A%20%7B%20'nested_object'%3A%20%7B%5Cn%20%20%20%20%20%20%20%20city%3A%20'required'%2C%20%5Cn%20%20%20%20%20%20%20%20zip%3A%20%5B'required'%2C%20'positive_integer'%5D%5Cn%20%20%20%20%7D%7D%5Cn%7D%22%2C%22data%22%3A%22%7B%5Cn%20%20%20%20name%3A%20%5C%22Michael%5C%22%2C%5Cn%20%20%20%20phone%3A%20%5C%220441234567%5C%22%2C%5Cn%20%20%20%20address%3A%20%7B%5Cn%20%20%20%20%20%20%20%20city%3A%20%5C%22Kiev%5C%22%2C%20%5Cn%20%20%20%20%20%20%20%20zip%3A%20%5C%2230552%5C%22%5Cn%20%20%20%20%7D%5Cn%7D%22%7D)\r\n\r\n    {\r\n        name: 'required',\r\n        phone: {max_length: 10},\r\n        address: { 'nested_object': {\r\n            city: 'required',\r\n            zip: ['required', 'positive_integer']\r\n        }}\r\n    }\r\n* {nested\\_object: {}} is a shorter form of {nested\\_object: [{}]}\r\n*See \"How it works\" section*\r\n\r\n**Simple list validation** [(demo)](http://webbylab.github.io/livr-playground/#%7B%22rules%22%3A%22%7B%5Cn%20%20%20%20order_id%3A%20%5B'required'%2C%20'positive_integer'%5D%2C%5Cn%20%20%20%20product_ids%3A%20%7B%20%5Cn%20%20%20%20%20%20%20'list_of'%3A%20%5B%20'required'%2C%20%20'positive_integer'%20%5D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22data%22%3A%22%7B%5Cn%20%20%20%20order_id%3A%2010455%2C%5Cn%20%20%20%20product_ids%3A%20%5B3455%2C3456%2C3566%5D%5Cn%7D%22%7D)\r\n\r\n    {\r\n        order_id: ['required', 'positive_integer'],\r\n        product_ids: { 'list_of': [ 'required',  'positive_integer' ] }\r\n    }\r\n\r\n\r\n**Validating list of objects** [(demo)](http://webbylab.github.io/livr-playground/#%7B%22rules%22%3A%22%7B%5Cn%20%20%20%20order_id%3A%20%5B'required'%2C%20'positive_integer'%5D%2C%5Cn%20%20%20%20products%3A%20%5B%20'not_empty_list'%2C%20%7B%20'list_of_objects'%3A%20%7B%5Cn%20%20%20%20%20%20%20%20product_id%3A%20%5B'required'%2C'positive_integer'%5D%2C%5Cn%20%20%20%20%20%20%20%20quantity%3A%20%5B'required'%2C%20'positive_integer'%5D%5Cn%20%20%20%20%7D%7D%5D%5Cn%7D%22%2C%22data%22%3A%22%7B%5Cn%20%20%20%20order_id%3A%2010345%2C%5Cn%20%20%20%20products%3A%20%5B%7B%5Cn%20%20%20%20%20%20%20%20product_id%3A%203455%2C%5Cn%20%20%20%20%20%20%20%20quantity%3A2%5Cn%20%20%20%20%7D%2C%7B%5Cn%20%20%20%20%20%20%20%20product_id%3A%203456%2C%5Cn%20%20%20%20%20%20%20%20quantity%3A3%5Cn%20%20%20%20%7D%5D%5Cn%7D%22%7D)\r\n\r\n    {\r\n        order_id: ['required', 'positive_integer'],\r\n        products: [ 'not_empty_list', { 'list_of_objects': {\r\n            product_id: ['required','positive_integer'],\r\n            quantity: ['required', 'positive_integer']\r\n        }}]\r\n    }\r\n\r\n**Validating list of different objects** [(demo)](http://webbylab.github.io/livr-playground/#%7B%22rules%22%3A%22%7B%5Cn%20%20%20%20order_id%3A%20%5B'required'%2C%20'positive_integer'%5D%2C%5Cn%20%20%20%20products%3A%20%5B'required'%2C%20%7B%20'list_of_different_objects'%3A%20%5B%5Cn%20%20%20%20%20%20%20%20product_type%2C%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20material%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20product_type%3A%20'required'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20material_id%3A%20%5B'required'%2C%20'positive_integer'%5D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20quantity%3A%20%5B'required'%2C%20%7B'min_number'%3A%201%7D%20%5D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20warehouse_id%3A%20'positive_integer'%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20service%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20product_type%3A%20'required'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20%5B'required'%2C%20%7B'max_length'%3A%2020%7D%20%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%7D%5D%5Cn%7D%22%2C%22data%22%3A%22%7B%5Cn%20%20%20%20order_id%3A%2010455%2C%5Cn%20%20%20%20products%3A%20%5B%7B%20%5Cn%20%20%20%20%20%20%20%20product_type%3A%20'material'%2C%5Cn%20%20%20%20%20%20%20%20material_id%3A%20345%2C%5Cn%20%20%20%20%20%20%20%20quantity%3A%20%205%2C%5Cn%20%20%20%20%20%20%20%20warehouse_id%3A%2024%5Cn%20%20%20%20%7D%2C%7B%5Cn%20%20%20%20%20%20%20%20product_type%3A%20'service'%2C%5Cn%20%20%20%20%20%20%20%20name%3A%20'Clean%20filter'%5Cn%20%20%20%20%7D%5D%5Cn%7D%22%7D)\r\n\r\n    {\r\n        order_id: ['required', 'positive_integer'],\r\n        products: ['required', { 'list_of_different_objects': [\r\n            'product_type', {\r\n                material: {\r\n                    product_type: 'required',\r\n                    material_id: ['required', 'positive_integer'],\r\n                    quantity: ['required', {'min_number': 1} ],\r\n                    warehouse_id: 'positive_integer'\r\n                },\r\n                service: {\r\n                    product_type: 'required',\r\n                    name: ['required', {'max_length': 10} ]\r\n                }\r\n            }\r\n        ]}]\r\n    }\r\n\r\n**Output modification**\r\n\r\n    {\r\n        email: ['trim', 'required', 'email', 'to_lc']\r\n    }\r\n\r\n* \"trim\" removes leading and trailing spaces. (skips empty values and object references)\r\n* \"to\\_lc\" transforms string to lower case. (skips empty values and object references)\r\n\r\nYou can create pipeline with any filters you like.\r\n\r\n### How it works ###\r\nYou should define a structure:\r\n    FIELD\\_NAME: VALIDATION\\_RULE\r\n* FIELD\\_NAME is a name of field to validate\r\n* VALIDATION\\_RULE is a name of function to be called. It can be function that builds validator or maybe just a validation function itself. Some arguments cab be passed to the function - \"{ VALIDATION\\_RULE: ARGUMENTS }\". You may pass an array of validation rules. If you want to pass several arguments you should use array.\r\n\r\nExamples:\r\n\r\n'required' or {'required': [] } becomes:\r\n\r\n    required();\r\n\r\n{ 'max\\_length': 5 } or { 'max\\_length': [5] } becomes:\r\n\r\n    max_length(5);\r\n\r\n{'length\\_between': [1,10] } becomes:\r\n\r\n    length_between(1,10);\r\n\r\n{'one\\_of': [['Kiev','Moscow']] } (this is old syntax) becomes:\r\n\r\n    one_of(['Kiev', 'Moscow']);\r\n\r\n{'one\\_of': ['Kiev','Moscow'] } (supported from v0.4)  becomes:\r\n\r\n    one_of('Kiev', 'Moscow');\r\n\r\n{'my\\_own\\_rule': [1, [2, 3], 'bla'] } becomes:\r\n\r\n    my_own_rule(1, [2, 3], 'bla');\r\n\r\nValidator receives value to validate and returns an error message(in case of failed validation) or empty string(in case of success). Thats all.\r\n\r\nSo, the idea is that there is a tiny core which can be easly extended with new rules.\r\n\r\n## Validation Rules ##\r\nBe aware that all standard rules just skip checking empty values.\r\nSo, empty string will pass next validation - \"first_name: { min_length: [10] }\". We have special rules \"required\" and \"not_empty\" to check that value is present.\r\nThis allows us to use the same rules for not required fields.\r\n\r\n    first_name: { min_length: [10] } # name is optional. We will check length only if \"first_name\" was passed\r\n    first_name: [ 'required', { min_length: [10] } ] # check that the name is present and validate length\r\n\r\n\r\nStandard rules that should be supported by every implementation:\r\n\r\n * Base Rules\r\n    * required\r\n    * not\\_empty\r\n    * not\\_empty\\_list\r\n * String Rules\r\n    * one\\_of\r\n    * max\\_length\r\n    * min\\_length\r\n    * length\\_between\r\n    * length\\_equal\r\n    * like\r\n * Numeric Rules\r\n    * integer\r\n    * positive\\_integer\r\n    * decimal\r\n    * positive\\_decimal\r\n    * max\\_number\r\n    * min\\_number\r\n    * number\\_between\r\n * Special Rules\r\n    * email\r\n    * url\r\n    * iso\\_date\r\n    * equal\\_to\\_field\r\n * Helper Rules\r\n    * nested\\_object\r\n    * list\\_of\r\n    * list\\_of\\_objects\r\n    * list\\_of\\_different\\_objects\r\n * Filter rules\r\n    * trim\r\n    * to\\_lc\r\n    * to\\_uc\r\n    * remove\r\n    * leave\\_only\r\n\r\n### Base Rules ###\r\n#### required ####\r\nError code: 'REQUIRED'\r\n\r\nExample:\r\n\r\n    {first_name: 'required'}\r\n\r\n#### not\\_empty ####\r\nError code: 'CANNOT_BE_EMPTY'\r\n\r\nExample:\r\n\r\n    {first_name: 'not_empty'}\r\n\r\n#### not\\_empty\\_list ####\r\nChecks that list contains at least one element\r\n\r\nError code: 'CANNOT\\_BE\\_EMPTY' (If the value is not present or list is empty). If the value is present but it is not a list the error code will be 'WRONG\\_FORMAT'\r\n\r\nExample:\r\n\r\n    {products_ids: 'not_empty_list'}\r\n\r\n### String Rules ###\r\n#### one\\_of ####\r\nError code: 'NOT\\_ALLOWED\\_VALUE'\r\n\r\nExample:\r\n\r\n    // new syntax (introduced in v0.4)\r\n    { first_name: {'one_of': ['Anton', 'Igor']} }\r\n\r\n    // old syntax\r\n    { first_name: {'one_of': [['Anton', 'Igor']]} }\r\n\r\n#### max\\_length  ####\r\nError code: 'TOO\\_LONG'\r\n\r\nExample:\r\n\r\n    {first_name: {max_length: 10}\r\n\r\n#### min\\_length ####\r\nError code: 'TOO\\_SHORT'\r\n\r\nExample:\r\n\r\n    {first_name: {min_length: 2}\r\n\r\n#### length\\_between ####\r\nError code: 'TOO\\_LONG' or 'TOO\\_SHORT'\r\n\r\nExample:\r\n\r\n    {first_name: {length_between: [2, 10] }\r\n\r\n#### length\\_equal ####\r\nError code: 'TOO\\_LONG' or 'TOO\\_SHORT'\r\n\r\nExample:\r\n\r\n    {first_name: {length_equal: 7}\r\n\r\n#### like ####\r\nError code: 'WRONG\\_FORMAT'\r\n\r\nExample:\r\n\r\n    {first_name: {like: '^\\w+?$'}\r\n    {first_name: {like: ['^\\w+?$', 'i']} // with flags\r\n\r\nOnly 'i' flag is currently required by specification.\r\n\r\n**Be aware** that regular expressions can be language dependent. Try to use most common syntax.\r\n\r\n### Numeric Rules ###\r\n#### integer ####\r\nError code: 'NOT\\_INTEGER'\r\n\r\nExample:\r\n\r\n    {age: 'integer'}\r\n\r\n#### positive\\_integer ####\r\nError code: 'NOT\\_POSITIVE\\_INTEGER'\r\n\r\nExample:\r\n\r\n    {age: 'positive_integer'}\r\n\r\n#### decimal ####\r\nError code: 'NOT\\_DECIMAL'\r\n\r\nExample:\r\n\r\n    {price: 'decimal'}\r\n\r\n#### positive\\_decimal ####\r\nError code: 'NOT\\_POSITIVE_DECIMAL'\r\n\r\nExample:\r\n\r\n    {price: 'positive_decimal'}\r\n\r\n#### max\\_number ####\r\nError code: 'TOO\\_HIGH'\r\n\r\nExample:\r\n\r\n    {age: { 'max_number': 95 } }\r\n\r\n#### min\\_number ####\r\nError code: 'TOO\\_LOW'\r\n\r\nExample:\r\n\r\n    {age: { 'min_number': 18 } }\r\n\r\n#### number\\_between ####\r\nError code: 'TOO\\_HIGH' or 'TOO\\_LOW'\r\n\r\nExample:\r\n\r\n    {age: { 'number_between': [18, 95] } }\r\n\r\n###  Special Rules ###\r\n#### email ####\r\nError code: 'WRONG_EMAIL'\r\n\r\nExample:\r\n\r\n    {login: 'email'}\r\n\r\n#### url ####\r\nAllows you to validate url. Allows 'HTTP' and 'HTTPS' protocols. Protocol is required.\r\n\r\nError code: 'WRONG_URL'\r\n\r\nExample:\r\n\r\n    {url: 'url'}\r\n\r\n#### iso\\_date ####\r\n\r\nCheck whether a value is an ISO 8601 date (without time). Allowed date example - \"2014-08-14\"\r\n\r\nError code: 'WRONG_DATE'\r\n\r\nExample:\r\n\r\n    {date: 'iso_date'}\r\n\r\n\r\n#### equal\\_to\\_field ####\r\nError code: 'FIELDS\\_NOT\\_EQUAL'\r\n\r\nExample:\r\n\r\n    {password2: {'equal_to_field': 'password' }}\r\n\r\n###  Helper Rules ###\r\n\r\n#### nested_object ####\r\nAllows you to describe validation rules for a nested object.\r\n\r\nError code: depends on nested validators. If nested object is not a hash should return \"FORMAT_ERROR\"\r\n\r\nExample:\r\n\r\n    address: { 'nested_object': {\r\n        city: 'required',\r\n        zip: ['required', 'positive_integer']\r\n    } }\r\n\r\n#### list_of ####\r\nAllows you to describe validation rules for a list. Validation rules will be applyed for each array element.\r\n\r\nError code: depends on nested validators\r\n\r\nExample:\r\n\r\n    // new syntax (introduced in v0.4)\r\n    { product_ids: { 'list_of': 'positive_integer' }}\r\n    { product_ids: { 'list_of': ['required',  'positive_integer'] }} // new syntax\r\n\r\n    // old syntax\r\n    { product_ids: { 'list_of': [[ 'positive_integer' ]] }}\r\n    { product_ids: { 'list_of': [[ 'required',  'positive_integer' ]] }}\r\n\r\n#### list_of_objects ####\r\nAllows you to describe validation rules for list of objects. Validation rules will be applyed for each array element.\r\n\r\nError code: depends on nested validators. Or \"FORMAT_ERROR\" in case of receiving data not suitable for validation.\r\n\r\nExample:\r\n\r\n    products: ['required', { 'list_of_objects': [{\r\n        product_id: ['required','positive_integer'],\r\n        quantity: ['required', 'positive_integer']\r\n    }]}]\r\n\r\n\r\n#### list_of_different_objects ####\r\nAllows you to describe validation rules for list of different objects. Validation rules will be applied for each array element.\r\n\r\nError code: depends on nested validators. Or \"FORMAT_ERROR\" in case of receiving data not suitable for validation.\r\n\r\nExample:\r\n\r\n    products: ['required', { 'list_of_different_objects': [\r\n        product_type, {\r\n            material: {\r\n                product_type: 'required',\r\n                material_id: ['required', 'positive_integer'],\r\n                quantity: ['required', {'min_number': 1} ],\r\n                warehouse_id: 'positive_integer'\r\n            },\r\n            service: {\r\n                product_type: 'required',\r\n                name: ['required', {'max_length': 10} ]\r\n            }\r\n        }\r\n    ]}]\r\n\r\n\r\nIn this example validator will look on \"product\\_type\" in each object and depending on it will use corresponding set of rules\r\n\r\n###  Filter Rules ###\r\n\r\nAdditional rules for data modification. They do not return errors just skips values that are not appropriate.\r\n\r\n#### trim ####\r\nRemoves leading and trailing spaces. Skips object references.\r\n\r\nExample:\r\n\r\n    {email: 'trim'}\r\n\r\n#### to\\_lc ####\r\nConverts string to lower case. Skips object references.\r\n\r\nExample:\r\n\r\n    {email: 'to_lc'}\r\n\r\n#### to\\_uc ####\r\nConverts string to upper case. Skips object references.\r\n\r\nExample:\r\n\r\n    {currency_code: 'to_uc'}\r\n\r\n#### remove ####\r\nRemoves characters from string\r\n\r\nExample:\r\n\r\n    { text: { remove: '0123456789' } }  // Remove all numbers from text\r\n\r\n#### leave\\_only ####\r\nRemoves characters from string\r\n\r\nExample:\r\n\r\n    { text: { leave_only: '0123456789' } }  // Leaves only numbers in text\r\n\r\n## Rules aliasing\r\n\r\nWith rules aliasing you can create custom rules easely and assign own error codes in case own need. Moreover, aliased rules will work across all implementations as they are just data structures.\r\n\r\nAlias struture:\r\n\r\n    {\r\n        name: ALIAS_NAME,\r\n        rules: ALIAS_RULES,\r\n        error: ERROR_CODE (optional)\r\n    }\r\n\r\nIf ERROR_CODE is empty than validator will return subrules errors.\r\n\r\nExample:\r\n\r\n    {\r\n        name: 'valid_address',\r\n        rules: { nested_object: {\r\n            country: 'required',\r\n            city: 'required',\r\n            zip: 'positive_integer'\r\n        }}\r\n    }\r\n\r\n    {\r\n        name: 'adult_age'\r\n        rules: [ 'positive_integer', { min_number: 18 } ],\r\n        error: 'WRONG_AGE'\r\n    }\r\n\r\nMoreover, you can use aliased rules in aliased rules.\r\n\r\n###  Usage example\r\n\r\nLet's assume that you have next data structure:\r\n\r\n    {\r\n        name: 'Viktor',\r\n        age: 30,\r\n        address: {\r\n            country: 'Ukraine',\r\n            city: 'Kiev',\r\n            zip: '11111'\r\n        }\r\n    }\r\n\r\nAnd you have next validation rules for it:\r\n\r\n    {\r\n        name: 'required',\r\n        age: ['required', 'positive_integer', { min_number: 18 } ],\r\n        address: ['required', {nested_object: {\r\n            country: 'required',\r\n            city: 'required',\r\n            zip: 'positive_integer'\r\n        }}]\r\n    }\r\n\r\nYou use 'address' in a lot of your objects (user address in user, office address in office object and others) and you want to reuse the same address rules in all places.  You have two ways: write custom rule 'valid_address' or assign rules to a variable and just reuse the variable. The first way requires much time and coding. Moreover, you cannot save new rule implementation is serialzed JSON file. The second way is much easier and you can store rule implemetation in JSON file but you cannot store user validation rules. Moreover, the second way does not allow you to redefine error code for address.\r\n\r\nFrom v0.4 you have the third way - rule aliasing.\r\n\r\nYou can register aliases for complex rules. The way how you register an alias depends on the implementation but the way how use and describe it is covered by the specification. This appoach allows you store aliases in serialized JSON files and then use them across different implementations.\r\n\r\n    // Aliasing pseudo code\r\n    validator.register_rule_alias({\r\n        name: 'valid_address',\r\n        rules: { nested_object: {\r\n            country: 'required',\r\n            city: 'required',\r\n            zip: 'positive_integer'\r\n        }}\r\n    });\r\n\r\n    validator.register_rule_alias( {\r\n        name: 'adult_age',\r\n        rules: [ 'positive_integer', { min_number: 18 } ]\r\n    });\r\n\r\n    // Usage\r\n    {\r\n        name: 'required',\r\n        age: ['required', 'adult_age' ],\r\n        address: ['required', 'valid_address']\r\n    }\r\n\r\nMoreover, you can add own error codes for the rules\r\n\r\nFor example\r\n\r\n    // Aliasing pseudo code\r\n    validator.register_rule_alias({\r\n        name: 'valid_address',\r\n        rules: { nested_object: {\r\n            country: 'required',\r\n            city: 'required',\r\n            zip: 'positive_integer'\r\n        }},\r\n        error: 'WRONG_ADDRESS'\r\n    });\r\n\r\nand if validation of address fails you will have the next error\r\n\r\n    {\r\n        address: 'WRONG_ADDRESS'\r\n    }\r\n\r\n## Developers Guide\r\n\r\nRequirements to implementation\r\n\r\n1. Your implementation should support all validation rules described in \"Validation Rules\"\r\n2. Your implementation should support \"Rules aliasing\"\r\n3. Your implementation should return error codes descibed in the specification\r\n4. It should be easy to implement own rules\r\n5. Please, use provided \"test\\_suite\" to ensure that your implementation works correctly\r\n\r\n## Changes\r\n\r\n### v0.2\r\n\r\n * Added not\\_empty\\_list rule with test cases\r\n\r\n### v0.3\r\n\r\n * Added filter rules (trim, to\\_lc, to\\_uc)\r\n\r\n### v0.4 (current)\r\n\r\n * Added special rules (url, iso\\_date)\r\n * Added filter rules (remove, leave_only)\r\n * Add flags 'i' flag support to the \"like\" rule\r\n * Introduces new syntax for \"one_of\" and \"list_of\" rules. (See \"Syntax changes for 'one_of' and 'list_of' rules\")\r\n * Rules aliasing (with custom errors)\r\n\r\n\r\n## Syntax changes for 'one_of' and 'list_of' rules\r\nOld syntax {one_of: [['val1', 'val2']]} was hard to remember for many people. The idea was that list of allowed values should be passed as array reference. So, {one_of: [['val1', 'val2']]} becomes one_of(['val1', 'val2']) but it is not always clear for users. Therefore, it was decided to introduce a new syntax. Now you can write {one_of: ['val1', 'val2']} that becomes one_of('val1', 'val2'). The main problem with it that you do not know how many arguments will be passed to 'one_of'. Moreover, you should support both syntaxes for backward compatibility (test suite contains tests for both cases). But it was decided that \"one_of\" and \"list_of\" rules can handle both syntaxes by themselves.\r\n\r\n## TODO\r\n\r\n* Describe internals with detailed step-by-step example\r\n* Write developers guide\r\n\r\n# LICENSE AND COPYRIGHT\r\n\r\nCopyright 2012 Viktor Turskyi.\r\n\r\nThis program is free software; you can redistribute it and/or modify it under the terms of the the Artistic License (2.0). You may obtain a copy of the full license at:\r\n\r\nhttp://www.perlfoundation.org/artistic\\_license\\_2\\_0\r\n\r\nAny use, modification, and distribution of the Standard or Modified Versions is governed by this Artistic License. By using, modifying or distributing the Package, you accept this license. Do not use, modify, or distribute the Package, if you do not accept this license.\r\n\r\nIf your Modified Version has been derived from a Modified Version made by someone other than you, you are nevertheless required to ensure that your Modified Version complies with the requirements of this license.\r\n\r\nThis license does not grant you the right to use any trademark, service mark, tradename, or logo of the Copyright Holder.\r\n\r\nThis license includes the non-exclusive, worldwide, free-of-charge patent license to make, have made, use, offer to sell, sell, import and otherwise transfer the Package with respect to any patent claims licensable by the Copyright Holder that are necessarily infringed by the Package. If you institute patent litigation (including a cross-claim or counterclaim) against any party alleging that the Package constitutes direct or contributory patent infringement, then this Artistic License to you shall terminate on the date that such litigation is filed.\r\n\r\nDisclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS \"AS IS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n","google":"UA-9638621-7","note":"Don't delete this file! It's used internally to help with page regeneration."}